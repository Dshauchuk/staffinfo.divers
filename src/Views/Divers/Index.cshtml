@model int
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Водолазы</h1>
<hr />
<br />

<div class="card">
    <h5 class="card-header">Фильтр</h5>
    <div class="card-body">
        <div class="row">
            <div class="form-group col-md-4 col-sm-12">
                <label for="nameQuery" class="input-name">Имя</label>
                <input name="nameQuery" id="nameQuery" class="form-control" type="text" />
            </div>
            <div class="form-group col-md-4 col-sm-12">
                <label for="medicalExaminationStartDate" class="input-name">Мед. освидет.(от)</label>
                <input name="medicalExaminationStartDate" class="form-control" type="text" id="medicalExaminationStartDate" />
            </div>
            <div class="form-group col-md-4 col-sm-12">
                <label for="medicalExaminationEndDate" class="input-name">Мед. освидет.(до)</label>
                <input name="medicalExaminationEndDate" class="form-control" type="text" id="medicalExaminationEndDate" />
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-4 col-sm-12">
                <label for="rescueStationId" class="input-name">Станция</label>
                <select name="rescueStationId" class="form-control" id="rescueStationId">
                    <option value="">-Не Выбрано-</option>
                </select>
            </div>
            <div class="form-group col-md-4 col-sm-12">
                <label for="minQualification" class="input-name">Мин. квалификация</label>
                <select name="minQualification" class="form-control" id="minQualification">
                    <option value="">-Не Выбрано-</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                </select>
            </div>
            <div class="form-group col-md-4 col-sm-12">
                <label for="maxQualification" class="input-name">Макс. квалификация</label>
                <select name="maxQualification" class="form-control" id="maxQualification">
                    <option value="">-Не Выбрано-</option>
                    <option value="3">3</option>
                    <option value="2">2</option>
                    <option value="1">1</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-4 col-sm-12">
                <label for="minHours" class="input-name">Часы под водой(от)</label>
                <input name="minHours" id="minHours" class="form-control" type="number" min="0" step="1" />
            </div>
            <div class="form-group col-md-4 col-sm-12">
                <label for="maxHours" class="input-name">Часы под водой(до)</label>
                <input name="maxHours" id="maxHours" class="form-control" type="number" min="0" step="1" />
            </div>
        </div>
    </div>
    <div class="card-footer">
        <button class="btn btn-primary" style="float: right;" id="loadDiversBtn"><i class="fa fa-search fa-lg"></i> Найти</button>
    </div>
</div>
<br />
<br />


<div>
    <a href="/Divers/New" class="btn btn-primary"><i class="fa fa-user-plus"></i> Добавить</a>
</div>
<br />

<div class="row" style="display: none;" id="divers-table-block">
    <div class="col-md-12">
        <table class="table table-striped display nowrap" id="divers-table" style="width:100%">
            <thead class="thead-dark">
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Фамилия</th>
                    <th scope="col">Имя</th>
                    <th scope="col">Отчество</th>
                    <th scope="col">Станция</th>
                    <th scope="col">Квалификация</th>
                    <th scope="col">Всего часов под водой</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

<div id="preview" class="preview">
    <img class="avatar" style="margin: 5px;" height="200" width="200" />
    <p id="previewStationName"></p>
    <p id="previewName"></p>
</div>

@section scripts{
    <script type="text/javascript">

        function loadDivers() {
            var options = {
                rescueStationId: $('#rescueStationId').val(),
                medicalExaminationStartDate: $('#medicalExaminationStartDate').val(),
                medicalExaminationEndDate: $('#medicalExaminationEndDate').val(),
                minQualification: $('#minQualification').val(),
                maxQualification: $('#maxQualification').val(),
                nameQuery: $('#nameQuery').val(),
                minHours: $('#minHours').val(),
                maxHours: $('#maxHours').val()
            };

            $('#divers-table-block').show();

            $.ajax({
                url: "/Divers/GetListJson",
                type: "GET",
                dataType: "json",
                cache: false,
                data: options
            })
                .done(function (dataSet) {
                    $('#divers-table').DataTable({
                        destroy: true,
                        scrollX: true,
                        dom: "<'row'<'col-3 text-left'l>><'row'<'col-sm-12'tr>><'row'<'col-6 text-left'i><'col-6 text-right'p>>",
                        data: dataSet,
                        columns: [
                            {
                                data: "photoUrl", render: function (data, type, row, meta) {
                                    var url;

                                    if (data)
                                        url = data;
                                    else
                                        url = '/images/avatar-default.png'

                                    return '<img src="' + url + '" width="50" height="50" style="border-radius: 100px;" />'
                                }
                            },
                            { data: "lastName" },
                            { data: "firstName" },
                            { data: "middleName" },
                            {
                                data: "rescueStation", render: function (data, type, row, meta) {
                                    if (data)
                                        return data.stationName;
                                    else
                                        return "-";
                                }
                            },
                            { data: "qualification" },
                            {
                                data: "workingTime", render: function (data, type, row, meta) {

                                    if (data && data.length > 0) {
                                        var sum = data.reduce((a, b) => a + b.workingMinutes, 0);

                                        var workingHours = parseInt(sum / 60);
                                        var workingMinutes = parseInt(sum % 60);
                                        var hoursWord = getHoursWord(workingHours);
                                        var minutesWord = getMinutesWord(workingMinutes);
                                        return workingHours + ' ' + hoursWord + ' ' + workingMinutes + ' ' + minutesWord;
                                    }
                                    else
                                        return '0 часов 0 минут';
                                }
                            },
                            {
                                data: "diverId",
                                render: function (data, type, row, meta) {

                                    return '<a class="btn btn-primary" href="/Divers/Details?diverId=' + data + '"><i class="fa fa-long-arrow-right"></i> Подробнее</a>';
                                }
                            }
                        ],
                        columnDefs: [
                            { "className": "dt-text-center", "targets": [5, 7] }
                        ],
                        language: {
                            url: "/localisation/dataTables.russian.lang.json"
                        },
                        'fnCreatedRow': function (nRow, aData, iDataIndex) {
                            $(nRow).attr('class', 'rowTable');
                        },
                    });
                })
                .fail(function (error) {
                    errorAlert(error);
                });
        }

        function getHoursWord(workingHours) {
            var hoursWord = "часов";
            if (workingHours > 10 && workingHours < 20) { }
            else {
                switch (workingHours.toString()[workingHours.toString().length - 1]) {
                    case '2':
                    case '3':
                    case '4':
                        hoursWord = "часа";
                        break;
                    case '1':
                        hoursWord = "час";
                        break;
                }
            }
            return hoursWord;
        }

        function getMinutesWord(workingMinutes) {
            var minutesWord = "минут";
            if (workingMinutes > 10 && workingMinutes < 20) { }
            else {
                switch (workingMinutes.toString()[workingMinutes.toString().length - 1]) {
                    case '2':
                    case '3':
                    case '4':
                        minutesWord = "минуты";
                        break;
                    case '1':
                        minutesWord = "минута";
                        break;
                }
            }
            return minutesWord;
        }

        function setPreviewStyle(row) {
            var preview = $('#preview')[0];
            var h = preview.offsetHeight + 60;

            if (row.view.innerHeight - row.clientY < h) {
                preview.style.top = row.pageY - (h - (row.view.innerHeight - row.clientY)) - 5 + 'px';
            }
            else {
                preview.style.top = row.pageY + 'px';
            }
            preview.style.opacity = "1";
            preview.style.visibility = 'visible';
        }

        function setPreviewNames(row) {
            var lastName = row.currentTarget.children[1].innerHTML;
            var firstName = row.currentTarget.children[2].innerHTML;
            var middleName = row.currentTarget.children[3].innerHTML;
            var stationName = row.currentTarget.children[4].innerHTML;

            var previewName = $('#previewName')[0];
            var previewStationName = $('#previewStationName')[0];
            var avatarPreview = $('.avatar')[0];

            previewName.innerHTML = 'станция "' + stationName + '"';
            previewStationName.innerHTML = lastName + ' ' + firstName + ' ' + middleName;
            avatarPreview.src = row.currentTarget.children[0].firstChild.currentSrc;
        }

        $(function () {
            var datePickerConfigs = {
                locale: 'ru-ru',
                format: 'dd/mm/yyyy',
                uiLibrary: 'bootstrap4'
            }

            // load stations for the dropdown
            $.ajax({
                url: "/Stations/GetListJson",
                type: "GET",
                dataType: "json",
                cache: false
            })
                .done(function (dataSet) {
                    var index = 1;
                    var selectedIndex = 0;
                    var model = @Json.Serialize(Model);
                    dataSet.forEach(function (i) {
                        $('#rescueStationId')
                            .append($("<option></option>")
                                .attr("value", i.stationId)
                                .text(i.stationName));
                        if (model == i.stationId) {
                            selectedIndex = index;
                        }
                        index += 1;
                    });
                    document.getElementById('rescueStationId').selectedIndex = selectedIndex;

                    loadDivers();
                })
                .fail(function (error) {
                    errorAlert(error);
                });

            // initialize datepickers
            $('#medicalExaminationStartDate').datepicker(datePickerConfigs);
            $('#medicalExaminationEndDate').datepicker(datePickerConfigs);

            // forbid user input
            $("#medicalExaminationStartDate, #medicalExaminationEndDate").keydown(function (e) {
                e.preventDefault();
            });

            $('#loadDiversBtn').click(function (e) {
                loadDivers();
            })
        })
            .on('mouseover', '.rowTable', function (e) {
                if (e.target == e.currentTarget.children[0].firstChild) {
                    setPreviewNames(e);
                    setPreviewStyle(e);
                }                
            })
            .on('mouseout', '.rowTable', function (e) {
                if (e.target == e.currentTarget.children[0].firstChild) {
                    var preview = $('#preview')[0];
                    preview.style.opacity = "0";
                    preview.style.visibility = 'hidden';
                }
            })
    </script>
}