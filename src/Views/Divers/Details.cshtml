@model Diver
@{
    ViewData["Title"] = $"{Model.LastName} {Model.FirstName} {Model.MiddleName}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>@Model.LastName @Model.FirstName @Model.MiddleName</h1>
<div style="display:inline;">
    <a href="/Divers" class="btn btn-primary" style="float: right; margin-top: -50px;"><i class="fa fa-long-arrow-left fa-lg"></i> Вернуться к спику водолазов</a>
</div>


<div class="row">
    <div class="col-md-3" style="text-align: center;">
        <img class="avatar" style="margin: 5px; border-radius: 100px;" src=@(Model.PhotoUrl != null ? Model.PhotoUrl : "/images/avatar-default.png") height="200" width="200" />
        <div style="text-align: center;">
            <button id="uploadPhotoModal" class="btn btn-primary" style="margin-top: 5px;" data-toggle="modal" data-target="#addPhotoModal"><i class="fa fa-upload fa-lg"></i> Загрузить</button>
            <button class="btn btn-danger" style="margin-top: 5px; margin-left: 5px; display: @(Model.PhotoUrl != null ? "inline" : "none")" data-toggle="modal" data-target="#confirmDeleteDiverPhoto"><i class="fa fa-trash-o fa-lg"></i> Удалить</button>
        </div>
    </div>
    <div class="col-md-5">
        <table cellspacing="0">
            <tr>
                <td><h6>Родился: </h6></td>
                <td><h6><i>@Model.BirthDate.ToString("D", CultureInfo.CreateSpecificCulture("ru-RU"))</i></h6></td>
            </tr>
            <tr>
                <td><h6>Адрес: </h6></td>
                <td><h6><i>@Model.Address</i></h6></td>
            </tr>
        </table>
    </div>
    <div class="col-md-4" style="text-align: right">
        <a href="/Divers/Edit?diverId=@Model.DiverId" class="btn btn-warning"><i class="fa fa-pencil fa-lg"></i> Редактировать</a>
        <button class="btn btn-danger" data-toggle="modal" data-target="#confirmDeleteDiver"><i class="fa fa-trash-o fa-lg"></i> Удалить</button>
    </div>
</div>


<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
        <a class="nav-item nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-home" aria-selected="true">Водолазная книжка</a>
        <a class="nav-item nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-profile" role="tab" aria-controls="nav-profile" aria-selected="false">Станция</a>
        <a class="nav-item nav-link" id="nav-contact-tab" data-toggle="tab" href="#nav-contact" role="tab" aria-controls="nav-contact" aria-selected="false">Часы под водой</a>
    </div>
</nav>
<div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
        <table cellspacing="0">
            <tr>
                <td><label class="bold-label">№ Протокола: </label></td>
                <td><label>@Model.PersonalBookProtocolNumber</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Личный Номер: </label></td>
                <td><label>@Model.PersonalBookNumber</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Дата Выдачи: </label></td>
                <td><label>@Model.PersonalBookIssueDate.ToString("D", CultureInfo.CreateSpecificCulture("ru-RU"))</label></td>
            </tr>
        </table>
    </div>
    <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
        <table cellspacing="0">
            <tr>
                <td><label class="bold-label">Спасательная Станция: </label></td>
                <td><label>@(Model.RescueStation != null ? Model.RescueStation.StationName : "Станция не указана")</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Квалификация: </label></td>
                <td><label>@Model.Qualification</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Дата Мед. Обследования: </label></td>
                <td><label>@(Model.MedicalExaminationDate != null ? Model.MedicalExaminationDate.Value.ToString("D", CultureInfo.CreateSpecificCulture("ru-RU")) : "Дата не указана")</label></td>
            </tr>
        </table>
    </div>
    <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab">
        <button id="add-time-modal-btn" type="button" class="btn btn-primary"><i class="fa fa-plus fa-lg"></i> Добавить</button>
        <table class="table table-striped display nowrap" id="whours-table" style="width:100%">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Год</th>
                    <th scope="col">Время</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @if (Model.WorkingTime?.Any(t => t != null) == true)
                {
                    foreach (var i in Model.WorkingTime.Where(t => t != null))
                    {

                        var workingHours = i.WorkingMinutes / 60;
                        var workingMinutes = i.WorkingMinutes % 60;
                        var hoursWord = "часов";
                        var minutesWord = "минут";
                        if (workingHours > 10 && workingHours < 20) { }
                        else
                        {
                            switch (workingHours.ToString()[workingHours.ToString().Length - 1])
                            {
                                case '2':
                                case '3':
                                case '4':
                                    hoursWord = "часа";
                                    break;
                                case '1':
                                    hoursWord = "час";
                                    break;
                            }
                        }
                        if (workingMinutes > 10 && workingMinutes < 20) { }
                        else
                        {
                            switch (workingMinutes.ToString()[workingMinutes.ToString().Length - 1])
                            {
                                case '2':
                                case '3':
                                case '4':
                                    minutesWord = "минуты";
                                    break;
                                case '1':
                                    minutesWord = "минута";
                                    break;
                            }
                        }
                        @:<tr><td class="dt-center">@i.Year</td><td class="dt-center">@($"{workingHours} {hoursWord} {workingMinutes % 60} {minutesWord}")</td><td class="dt-center" style="text-align: right"><button id="change-time-modal-btn" class="btn btn-warning" style="margin-right: 5px;" data-year="@i.Year" data-minute="@i.WorkingMinutes"><i class="fa fa-pencil fa-lg"></i> Редактировать</button><button class="btn btn-danger" id="delete-time-btn" data-year="@i.Year"><i class="fa fa-trash-o fa-lg"></i> Удалить</button></td></tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="addTimeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавить Рабочие Часы</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="mainForm" asp-action="AddDivingTime" asp-controller="Divers" method="post">
                    <div class="form-group">
                        <label class="input-name">Год</label>
                        <input id="year" name="Year" type="number" class="form-control"/>
                        <label class="labels" id="yearLabel" for="year" style="color: #DC3545"></label>
                    </div>
                    <div class="form-group">
                        <label class="input-name">Общее рабочее время за этот год(минуты)</label>
                        <input id="minutes" name="WorkingMinutes" class="form-control" type="number" />
                        <label class="labels" id="minutesLabel" for="minutes" style="color: #DC3545"></label>
                    </div>
                    <input type="hidden" value="@Model.DiverId" name="diverId"/>
                    <div class="modal-footer align-content-center">
                        <button type="submit" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button type="button" class="btn btn-primary" id="add-time-btn"><i class="fa fa-floppy-o"></i> Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="changeTimeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Изменить Рабочие Часы</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="ChangeDivingTime" asp-controller="Divers" method="post">
                    <div class="form-group">
                        <label class="input-name">Год</label>
                        <input id="yearUpdate" name="Year" type="number" class="form-control" readonly/>
                        <label class="labels" id="yearUpdateLabel" for="year" style="color: #DC3545"></label>
                    </div>
                    <div class="form-group">
                        <label class="input-name">Общее рабочее время за этот год(минуты)</label>
                        <input id="minutesUpdate" name="WorkingMinutes" class="form-control" type="number" />
                        <label class="labels" id="minutesUpdateLabel" for="minutes" style="color: #DC3545"></label>
                    </div>
                    <input type="hidden" value="@Model.DiverId" name="diverId" />
                    <div class="modal-footer align-content-center">
                        <button type="submit" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button type="button" class="btn btn-primary" id="change-time-btn"><i class="fa fa-floppy-o"></i> Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addPhotoModal" tabindex="-1" role="dialog" aria-labelledby="uploadPhotoTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadPhotoTitle">@(Model.PhotoUrl != null ? "Изменить" : "Добавить") фото водолаза</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="UploadPhoto" asp-controller="Divers" method="post" enctype="multipart/form-data">
                    <input type="hidden" value="@Model.DiverId" name="diverId" />
                    <div>
                        <label class="upload_form">
                            <input id="fileinput" type="file" class="main_input_file" accept="image/*" />
                            <div>Обзор...</div>
                            <input class="f_name" type="text" id="f_name" disabled />
                        </label>
                    </div>
                    <input  id="uploadedFile" type="hidden" name="uploadedFile" />
                    <input type="hidden" value="@Model.DiverId" name="diverId" />
                    <div class="container" style="padding: 0px;">
                        <div class="row" style="overflow: hidden;">
                            <div class="col col-6">
                                <div>
                                    <img id="image" style="max-width: 100%;" alt="Picture">
                                </div>
                            </div>
                            <div class="col col-3">
                                <div id="preview" style="overflow: hidden; height: 150px; border-radius: 100px;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer align-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <input class="btn btn-primary" type="submit" value="Загрузить" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteDiver" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmTitle">Подтверждение удаления водолаза</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="DeleteDiver" asp-controller="Divers" method="post">
                    <label asp-for="FirstName" class="input-name">Для подтверждения удаления укажите имя и фамилию водолаза: <b><i>@Model.LastName @Model.FirstName</i></b></label>
                    <input asp-for="FirstName" value="" id="confirmName" class="form-control" type="text" placeholder="Фамилия Имя" data-val-required="Это поле обязательно." data-val-regex="Фамилия и имя не совпадают." data-val-regex-pattern="@Model.LastName @Model.FirstName" />
                    <span asp-validation-for="FirstName"></span>

                    <input type="hidden" value="@Model.DiverId" name="diverId" />

                    <div class="modal-footer align-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button id="confirm" type="submit" class="btn btn-danger" disabled>Удалить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteDiverPhoto" tabindex="-1" role="dialog" aria-labelledby="deletePhotoConfirmTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePhotoConfirmTitle">Подтверждение удаления фото</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="DeleteDiverPhoto" asp-controller="Divers" method="post">
                    <label asp-for="FirstName" class="input-name">Вы действительно хотите удалить фото ?</label>

                    <input type="hidden" value="@Model.DiverId" name="diverId" />

                    <div class="modal-footer align-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button id="confirm" type="submit" class="btn btn-danger">Удалить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        window.addEventListener('DOMContentLoaded', function () {
            var model = @Json.Serialize(Model);
            var workingTime = model.workingTime;

            var tr;
            var fileInput = $('#fileinput')[0];
            var uploadPhotoModal = $('#uploadPhotoModal')[0];
            var cropper;


            uploadPhotoModal.onclick = function () {
                var fName = $('#f_name')[0];
                var image = $('#image')[0];
                var preview = $('#preview')[0];

                fName.value = "Файл не выбран";
                image.style.display = "none";
                preview.style.display = "none";
                fileInput.value = "";

                if (cropper != null) {
                    cropper.destroy();
                    cropper = null;
                }
            };

            fileInput.addEventListener("change", function () {
                var fName = $('#f_name')[0];
                var image = $('#image')[0];
                var preview = $('#preview')[0];

                if (cropper != null) {
                    cropper.destroy();
                    cropper = null;
                }

                var curFile = fileInput.files[0];
                if (validFileType(curFile)) {
                    image.src = window.URL.createObjectURL(curFile);

                    cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 3,
                        preview: '#preview',
                        crop: function () {
                            var croppedCanvas = cropper.getCroppedCanvas();
                            var uploadedFile = $('#uploadedFile')[0];
                            var roundedCanvas = getRoundedCanvas(croppedCanvas);
                            uploadedFile.value = roundedCanvas.toDataURL().toString();
                        }
                    });
                    image.style.display = "inline";
                    preview.style.display = "block";
                }
                else {
                    fName.value = "Файл не выбран";
                    image.style.display = "none";
                    preview.style.display = "none";
                    fileInput.value = "";
                    alert("Выбранный файл не поддерживается.");
                }
            });

            function getRoundedCanvas(sourceCanvas) {
                var canvas = document.createElement('canvas');
                var context = canvas.getContext('2d');
                var width = sourceCanvas.width;
                var height = sourceCanvas.height;

                canvas.width = width;
                canvas.height = height;
                context.imageSmoothingEnabled = true;
                context.drawImage(sourceCanvas, 0, 0, width, height);
                context.globalCompositeOperation = 'destination-in';
                context.beginPath();
                context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI, true);
                context.fill();
                return canvas;
            }

            function validFileType(file) {
                for (var i = 0; i < AllowedAvatarFileExtensions.length; i++) {
                    if (file.name.endsWith(AllowedAvatarFileExtensions[i])) {
                        return true;
                    }
                }
                return false;
            }

            function checkYear(year, yearLabel)
            {
                if (year.value.length < 1 || year.value.length == "") {
                    setErrorStyle(year, yearLabel, "Это поле обязательно.");
                    return false;
                }
                if (year.value < 1980) {
                    return false;
                }
                if (workingTime[0] != null) {
                    if (workingTime.some((element) => element.year == year.value) == true) {
                        return false;
                    }
                }
                return true;
            }

            function changeYearErrorStyle(year, yearLabel) {
                year.style.borderColor = ColorsEnum.secondaryColor;
                yearLabel.innerHTML = "";

                if (year.value < 1980) {
                    setErrorStyle(year, yearLabel, "Минимальный год: 1980.");
                }
                if (workingTime[0] != null) {
                    if (workingTime.some((element) => element.year == year.value) == true) {
                        setErrorStyle(year, yearLabel, "Данные этого года уже есть");
                    }
                }
            }

            function checkMinutes(minutes, minutesLabel)
            {
                if (minutes.value.length < 1 || minutes.value.length == "") {
                    setErrorStyle(minutes, minutesLabel, "Это поле обязательно.");
                    flag = false;
                }

                if (minutes.value < 1) {
                    return false;
                }
                return true;
            }

            function changeMinutesErrorStyle(minutes, minutesLabel) {
                minutes.style.borderColor = ColorsEnum.secondaryColor;
                minutesLabel.innerHTML = "";

                if (minutes.value < 1 && minutes.value != "") {
                    setErrorStyle(minutes, minutesLabel, "Количество минут должно быть больше нуля.");
                }
            }

            function checkEmpty(year, yearLabel, minutes, minutesLabel)
            {
                return checkYear(year, yearLabel) && checkMinutes(minutes, minutesLabel);
            }

            function setErrorStyle(field, label, textError) {
                field.style.borderColor = ColorsEnum.dangerColor;
                label.innerHTML = textError;
            }

            $(function () {
                var year = $('#year')[0];
                var yearLabel = $('#yearLabel')[0];
                var minutes = $('#minutes')[0];
                var minutesLabel = $('#minutesLabel')[0];

                var yearUpdate = $('#yearUpdate')[0];
                var yearUpdateLabel = $('#yearUpdateLabel')[0];
                var minutesUpdate = $('#minutesUpdate')[0];
                var minutesUpdateLabel = $('#minutesUpdateLabel')[0];
                var addDivingTimeBtn = $('#add-time-btn')[0];
                var changeDivingTimeBtn = $('#change-time-btn')[0];

                addDivingTimeBtn.onclick = function () { return checkEmpty(year, yearLabel, minutes, minutesLabel) };
                changeDivingTimeBtn.onclick = function () { return checkEmpty(yearUpdate, yearUpdateLabel, minutesUpdate, minutesUpdateLabel) };

                year.oninput = function () { changeYearErrorStyle(year, yearLabel); };
                minutes.oninput = function () { changeMinutesErrorStyle(minutes, minutesLabel); };
                minutesUpdate.oninput = function () { changeMinutesErrorStyle(minutesUpdate, minutesUpdateLabel); };

                console.log(model);

                $('#confirmName').keyup(function() {
                    if ($(this).val() == (model.lastName + ' ' + model.firstName)) {
                        $('#confirm').prop('disabled', false);
                    } else {
                        $('#confirm').prop('disabled', true);
                    }
                });
            })
                .on('click', '#delete-time-btn', function () {
                    var diverId = model.diverId;
                    var year = $(this).data('year');
                    var tr = $(this).closest("tr");

                    $.ajax({
                        url: '/Divers/DeleteDivingTime',
                        method: 'DELETE',
                        data: {
                            diverId: diverId,
                            year: year
                        }
                    })
                        .done(function () {
                            updateWorkingTime();
                            successAlert("Запись успешно удалена");
                            tr.remove();
                        })
                        .fail(function (err) {
                            console.error(err);
                            errorAlert("Не удалось удалить запись");
                        })
                })
                .on('click', '#add-time-modal-btn', function () {
                    var year = $('#year')[0];
                    var yearLabel = $('#yearLabel')[0];
                    var minutes = $('#minutes')[0];
                    var minutesLabel = $('#minutesLabel')[0];
                    $('#year').val(@DateTime.Now.Year);
                    $('#minutes').val(null);

                    changeYearErrorStyle(year, yearLabel);
                    changeMinutesErrorStyle(minutes, minutesLabel);

                    $('#addTimeModal').modal('show');
                })
                .on('click', '#change-time-modal-btn', function () {
                    var minutesUpdate = $('#minutesUpdate')[0];
                    var minutesUpdateLabel = $('#minutesUpdateLabel')[0];
                    var year = $(this).data('year');
                    tr = $(this).closest("tr");
                    $('#yearUpdate').val(year);
                    $('#minutesUpdate').val($(this).data('minute'));

                    changeMinutesErrorStyle(minutesUpdate, minutesUpdateLabel);

                    $('#changeTimeModal').modal('show');
                })
                .on('click', '#add-time-btn', function () {
                    var year = $('#year')[0];
                    var yearLabel = $('#yearLabel')[0];
                    var minutes = $('#minutes')[0];
                    var minutesLabel = $('#minutesLabel')[0];
                    if (checkEmpty(year, yearLabel, minutes, minutesLabel) == false) {
                        return;
                    }

                    var diverId = model.diverId;
                    var year = $('#year').val();
                    var minutes = $('#minutes').val();

                    $.ajax({
                        url: '/Divers/AddDivingTime',
                        method: 'POST',
                        data: {
                            diverId: diverId,
                            year: year,
                            WorkingMinutes: minutes
                        }
                    })
                        .done(function () {
                            updateWorkingTime();
                            var workingHours = parseInt(minutes / 60);
                            var workingMinutes = parseInt(minutes % 60);
                            var hoursWord = getHoursWord(workingHours);
                            var minutesWord = getMinutesWord(workingMinutes);
                            $('#whours-table tr:last').after('<tr><td class="dt-center">' + year + '</td><td class="dt-center">' + workingHours + ' ' + hoursWord + ' ' + workingMinutes + ' ' + minutesWord + '</td><td class="dt-center" style="text-align: right"><button id="change-time-modal-btn" class="btn btn-warning" style="margin-right: 5px;" data-year="' + year + '" data-minute="' + workingMinutes + '"><i class="fa fa-pencil fa-lg"></i> Редактировать</button><button class="btn btn-danger" id="delete-time-btn" data-year="' + year + '" style="float: right;"><i class="fa fa-trash-o fa-lg"></i> Удалить</button></td></tr>');
                            $('#addTimeModal').modal('hide');
                            successAlert("Запись успешно добавлена");
                        })
                        .fail(function (err) {
                            console.error(err);
                            errorAlert("Не удалось добавить запись");
                        })
                })
                .on('click', '#change-time-btn', function () {
                    var minutes = $('#minutesUpdate')[0];
                    var minutesLabel = $('#minutesUpdateLabel')[0];
                    if (checkMinutes(minutes, minutesLabel) == false) {
                        return;
                    }

                    var diverId = model.diverId;
                    var year = $('#yearUpdate').val();
                    var minutes = $('#minutesUpdate').val();

                    $.ajax({
                        url: '/Divers/ChangeDivingTime',
                        method: 'POST',
                        data: {
                            diverId: diverId,
                            year: year,
                            WorkingMinutes: minutes
                        }
                    })
                        .done(function () {
                            updateWorkingTime();
                            var workingHours = parseInt(minutes / 60);
                            var workingMinutes = parseInt(minutes % 60);
                            var hoursWord = getHoursWord(workingHours);
                            var minutesWord = getMinutesWord(workingMinutes);
                            tr.remove();
                            $('#whours-table tr:last').after('<tr><td class="dt-center">' + year + '</td><td class="dt-center">' + workingHours + ' ' + hoursWord + ' ' + workingMinutes + ' ' + minutesWord + '</td><td class="dt-center" style="text-align: right"><button id="change-time-modal-btn" class="btn btn-warning" style="margin-right: 5px;" data-year="' + year + '" data-minute="' + minutes + '"><i class="fa fa-pencil fa-lg"></i> Редактировать</button><button class="btn btn-danger" id="delete-time-btn" data-year="' + year + '" style="float: right;"><i class="fa fa-trash-o fa-lg"></i> Удалить</button></td></tr>');
                            $('#changeTimeModal').modal('hide');
                            successAlert("Запись успешно изменена");
                        })
                        .fail(function (err) {
                            console.error(err);
                            errorAlert("Не удалось изменить запись");
                        })
                })

            function updateWorkingTime() {
                var diverId = model.diverId;
                $.ajax({
                    url: '/Divers/GetListWorkingTimeJson',
                    method: 'GET',
                    data: {
                        diverId: diverId
                    }
                })
                    .done(function (data) {
                        workingTime = data;
                    });
            }

            function getHoursWord(workingHours) {
                var hoursWord = "часов";
                if (workingHours > 10 && workingHours < 20) { }
                else {
                    switch (workingHours.toString()[workingHours.toString().length - 1]) {
                        case '2':
                        case '3':
                        case '4':
                            hoursWord = "часа";
                            break;
                        case '1':
                            hoursWord = "час";
                            break;
                    }
                }
                return hoursWord;
            }

            function getMinutesWord(workingMinutes) {
                var minutesWord = "минут";
                if (typeof workingMinutes === "undefined" || workingMinutes === null) {
                    return;
                }
                if (workingMinutes > 10 && workingMinutes < 20) { }
                else {
                    switch (workingMinutes.toString()[workingMinutes.toString().length - 1]) {
                        case '2':
                        case '3':
                        case '4':
                            minutesWord = "минуты";
                            break;
                        case '1':
                            minutesWord = "минута";
                            break;
                    }
                }
                return minutesWord;
            }

            $(document).ready(function() {

		    $(".main_input_file").change(function() {
			    var f_name = [];

			    for (var i = 0; i < $(this).get(0).files.length; ++i) {
				    f_name.push(" " + $(this).get(0).files[i].name);
			    }
			    $("#f_name").val(f_name.join(", "));
		    });
	    });
    });
    </script>
}