@model Diver
@{
    ViewData["Title"] = $"{Model.LastName} {Model.FirstName} {Model.MiddleName}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>@Model.LastName @Model.FirstName @Model.MiddleName</h1>
<div style="display:inline;">
    <a href="/Divers" class="btn btn-primary" style="float: right; margin-top: -50px;"><i class="fa fa-long-arrow-left fa-lg"></i> Вернуться к спику водолазов</a>
</div>


<div class="row">
    <div class="col-md-3" style="text-align: center;">
        <img class="avatar" style="margin: 5px;" src=@(Model.PhotoUrl != null ? Model.PhotoUrl : "/images/avatar-default.png") height="200" width="200" />
        <div style="text-align: center;">
            <button id="uploadPhoto" class="btn btn-primary" style="margin-top: 5px;" data-toggle="modal" data-target="#addPhotoModal"><i class="fa fa-upload fa-lg"></i> Загрузить</button>
            <button class="btn btn-danger" style="margin-top: 5px; margin-left: 5px; display: @(Model.PhotoUrl != null ? "inline" : "none")" data-toggle="modal" data-target="#confirmDeleteDiverPhoto"><i class="fa fa-trash-o fa-lg"></i> Удалить</button>
        </div>
    </div>
    <div class="col-md-5">
        <table cellspacing="0">
            <tr>
                <td><h6>Родился: </h6></td>
                <td><h6><i>@Model.BirthDate.ToString("D", CultureInfo.CreateSpecificCulture("ru-RU"))</i></h6></td>
            </tr>
            <tr>
                <td><h6>Адрес: </h6></td>
                <td><h6><i>@Model.Address</i></h6></td>
            </tr>
        </table>
    </div>
    <div class="col-md-4" style="text-align: right">
        <a href="/Divers/Edit?diverId=@Model.DiverId" class="btn btn-warning"><i class="fa fa-pencil fa-lg"></i> Редактировать</a>
        <button class="btn btn-danger" data-toggle="modal" data-target="#confirmDeleteDiver"><i class="fa fa-trash-o fa-lg"></i> Удалить</button>
    </div>
</div>


<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
        <a class="nav-item nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-home" aria-selected="true">Водолазная книжка</a>
        <a class="nav-item nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-profile" role="tab" aria-controls="nav-profile" aria-selected="false">Станция</a>
        <a class="nav-item nav-link" id="nav-contact-tab" data-toggle="tab" href="#nav-contact" role="tab" aria-controls="nav-contact" aria-selected="false">Часы под водой</a>
    </div>
</nav>
<div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
        <table cellspacing="0">
            <tr>
                <td><label class="bold-label">№ Протокола: </label></td>
                <td><label>@Model.PersonalBookProtocolNumber</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Личный Номер: </label></td>
                <td><label>@Model.PersonalBookNumber</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Дата Выдачи: </label></td>
                <td><label>@Model.PersonalBookIssueDate.ToString("D", CultureInfo.CreateSpecificCulture("ru-RU"))</label></td>
            </tr>
        </table>
    </div>
    <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
        <table cellspacing="0">
            <tr>
                <td><label class="bold-label">Спасательная Станция: </label></td>
                <td><label>@(Model.RescueStation != null ? Model.RescueStation.StationName : "Станция не указана")</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Квалификация: </label></td>
                <td><label>@Model.Qualification</label></td>
            </tr>
            <tr>
                <td><label class="bold-label">Дата Мед. Обследования: </label></td>
                <td><label>@(Model.MedicalExaminationDate != null ? Model.MedicalExaminationDate.Value.ToString("D", CultureInfo.CreateSpecificCulture("ru-RU")) : "Дата не указана")</label></td>
            </tr>
        </table>
    </div>
    <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab">
        <button id="add-time-modal-btn" type="button" class="btn btn-primary"><i class="fa fa-plus fa-lg"></i> Добавить</button>
        <table class="table table-striped display nowrap" id="whours-table" style="width:100%">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Год</th>
                    <th scope="col">Время</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @if (Model.WorkingTime?.Any(t => t != null) == true)
                {
                    foreach (var i in Model.WorkingTime.Where(t => t != null))
                    {

                        var workingHours = i.WorkingMinutes / 60;
                        var workingMinutes = i.WorkingMinutes % 60;
                        var hoursWord = "часов";
                        var minutesWord = "минут";
                        if (workingHours > 10 && workingHours < 20) { }
                        else
                        {
                            switch (workingHours.ToString()[workingHours.ToString().Length - 1])
                            {
                                case '2':
                                case '3':
                                case '4':
                                    hoursWord = "часа";
                                    break;
                                case '1':
                                    hoursWord = "час";
                                    break;
                            }
                        }
                        if (workingMinutes > 10 && workingMinutes < 20) { }
                        else
                        {
                            switch (workingMinutes.ToString()[workingMinutes.ToString().Length - 1])
                            {
                                case '2':
                                case '3':
                                case '4':
                                    minutesWord = "минуты";
                                    break;
                                case '1':
                                    minutesWord = "минута";
                                    break;
                            }
                        }
                        @:<tr><td class="dt-center">@i.Year</td><td class="dt-center">@($"{workingHours} {hoursWord} {workingMinutes % 60} {minutesWord}")</td><td class="dt-center"><button class="btn btn-danger" id="delete-time-btn" data-year="@i.Year"><i class="fa fa-trash-o fa-lg"></i> Удалить</button></td></tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="addTimeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Добавить Рабочие Часы</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="mainForm" asp-action="AddDivingTime" asp-controller="Divers" method="post">
                    <div class="form-group">
                        <label class="input-name">Год</label>
                        <input id="year" name="Year" type="number" class="form-control"/>
                        <label class="labels" id="yearLabel" for="year" style="color: #DC3545"></label>
                    </div>
                    <div class="form-group">
                        <label class="input-name">Общее рабочее время за этот год(минуты)</label>
                        <input id="minutes" name="WorkingMinutes" class="form-control" type="number"/>
                        <label class="labels" id="minutesLabel" for="minutes" style="color: #DC3545"></label>
                    </div>
                    <input type="hidden" value="@Model.DiverId" name="diverId"/>
                    <div class="modal-footer align-content-center">
                        <button type="submit" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button type="button" class="btn btn-primary" id="add-time-btn"><i class="fa fa-floppy-o"></i> Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addPhotoModal" tabindex="-1" role="dialog" aria-labelledby="uploadPhotoTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadPhotoTitle">@(Model.PhotoUrl != null ? "Изменить" : "Добавить") фото водолаза</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="UploadPhoto" asp-controller="Divers" method="post" enctype="multipart/form-data">
                    <input type="hidden" value="@Model.DiverId" name="diverId" />
                    <div>
                        <label class="upload_form">
                            <input id="fileinput" name="uploadedFile" type="file" class="main_input_file" accept="image/*" />
                            <div>Обзор...</div>
                            <input class="f_name" type="text" id="f_name" disabled />
                        </label>
                    </div>
                    <div>
                        <img class="preview" height="150" width="150"/>
                    </div>
                    <div class="modal-footer align-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <input class="btn btn-primary" type="submit" value="Загрузить" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteDiver" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmTitle">Подтверждение удаления водолаза</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="DeleteDiver" asp-controller="Divers" method="post">
                    <label asp-for="FirstName" class="input-name">Для подтверждения удаления укажите имя и фамилию водолаза: <b><i>@Model.LastName @Model.FirstName</i></b></label>
                    <input asp-for="FirstName" value="" id="confirmName" class="form-control" type="text" placeholder="Фамилия Имя" data-val-required="Это поле обязательно." data-val-regex="Фамилия и имя не совпадают." data-val-regex-pattern="@Model.LastName @Model.FirstName" />
                    <span asp-validation-for="FirstName"></span>

                    <input type="hidden" value="@Model.DiverId" name="diverId" />

                    <div class="modal-footer align-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button id="confirm" type="submit" class="btn btn-danger" disabled>Удалить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteDiverPhoto" tabindex="-1" role="dialog" aria-labelledby="deletePhotoConfirmTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePhotoConfirmTitle">Подтверждение удаления фото</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="DeleteDiverPhoto" asp-controller="Divers" method="post">
                    <label asp-for="FirstName" class="input-name">Вы действительно хотите удалить фото ?</label>

                    <input type="hidden" value="@Model.DiverId" name="diverId" />

                    <div class="modal-footer align-content-center">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                        <button id="confirm" type="submit" class="btn btn-danger">Удалить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        var model = @Json.Serialize(Model);
        var workingTime = model.workingTime;

        var fileInput = document.getElementById("fileinput");

        uploadPhoto.onclick = function () {
            var fName = document.getElementById("f_name");
            var preview = document.querySelector('.preview');

            fName.value = "Файл не выбран";
            preview.style.display = "none";
            fileInput.value = "";
        };

        fileInput.addEventListener("change", function () {
            var preview = document.querySelector('.preview');

            var curFile = fileInput.files[0];
            if (validFileType(curFile)) {
                preview.style.display = "inline";
                preview.src = window.URL.createObjectURL(curFile);
            }
            else {
                fileInput.value = "";
                alert("Выбранный файл не поддерживается.");
            }
        });

        function validFileType(file) {
            for (var i = 0; i < AllowedExtension.length; i++) {
                if (file.name.endsWith(AllowedExtension[i])) {
                    return true;
                }
            }
            return false;
        }

        function checkYear()
        {
            var year = document.getElementById("year");
            if (year.value < 1980) {
                return false;
            }
            if (workingTime[0] != null) {
                if (workingTime.some((element) => element.year == year.value) == true) {
                    return false;
                }
            }
            return true;
        }

        function changeYearErrorStyle() {
            var year = document.getElementById("year");
            var yearLabel = document.getElementById("yearLabel");
            year.style.borderColor = ColorsEnum.secondaryColor;
            yearLabel.innerHTML = "";

            if (year.value < 1980) {
                setErrorStyle(year, yearLabel, "Минимальный год: 1980.");
            }
            if (workingTime[0] != null) {
                if (workingTime.some((element) => element.year == year.value) == true) {
                    setErrorStyle(year, yearLabel, "Данные этого года уже есть");
                }
            }
        }

        function checkMinutes()
        {
            var minutes = document.getElementById("minutes");
            if (minutes.value < 1) {
                return false;
            }
            return true;
        }

        function changeMinutesErrorStyle() {
            var minutes = document.getElementById("minutes");
            var minutesLabel = document.getElementById("minutesLabel");
            minutes.style.borderColor = ColorsEnum.secondaryColor;
            minutesLabel.innerHTML = "";

            if (minutes.value < 1 && minutes.value != "") {
                setErrorStyle(minutes, minutesLabel, "Количество минут должно быть больше нуля.");
            }
        }

        function checkEmpty()
        {
            var year = document.getElementById("year");
            var yearLabel = document.getElementById("yearLabel");
            var minutes = document.getElementById("minutes");
            var minutesLabel = document.getElementById("minutesLabel");
            var flag = true;

            if (year.value.length < 1 || year.value.length == "") {
                setErrorStyle(year, yearLabel, "Это поле обязательно.");
                flag = false;
            }
            if (minutes.value.length < 1 || minutes.value.length == "") {
                setErrorStyle(minutes, minutesLabel, "Это поле обязательно.");
                flag = false;
            }

            var finalFlag = flag && checkYear() && checkMinutes();
            return finalFlag;
        }

        function setErrorStyle(field, label, textError) {
            field.style.borderColor = ColorsEnum.dangerColor;
            label.innerHTML = textError;
        }

        $(function () {
            var year = document.getElementById("year");
            var minutes = document.getElementById("minutes");
            var addDivingTimeBtn = document.getElementById("add-time-btn");
            addDivingTimeBtn.onclick = function () { return checkEmpty() };

            year.oninput = function () { checkYear(); changeYearErrorStyle(); };
            minutes.oninput = function () { checkMinutes(); changeMinutesErrorStyle(); };

            console.log(model);

            $('#confirmName').keyup(function() {
                if ($(this).val() == (model.lastName + ' ' + model.firstName)) {
                    $('#confirm').prop('disabled', false);
                } else {
                    $('#confirm').prop('disabled', true);
                }
            });
        })
            .on('click', '#delete-time-btn', function () {
                var diverId = model.diverId;
                var year = $(this).data('year');
                var tr = $(this).closest("tr");

                $.ajax({
                    url: '/Divers/DeleteDivingTime',
                    method: 'DELETE',
                    data: {
                        diverId: diverId,
                        year: year
                    }
                })
                    .done(function () {
                        updateWorkingTime();
                        successAlert("Запись успешно удалена");
                        tr.remove();
                    })
                    .fail(function (err) {
                        console.error(err);
                        errorAlert("Не удалось удалить запись");
                    })
            })
            .on('click', '#add-time-modal-btn', function () {
                $('#minutes').val(null);
                $('#year').val(@DateTime.Now.Year);
                checkYear();
                checkMinutes();
                changeYearErrorStyle();
                changeMinutesErrorStyle();

                $('#addTimeModal').modal('show');
            })
            .on('click', '#add-time-btn', function () {
                if (checkEmpty() == false) {
                    return;
                }

                var diverId = model.diverId;
                var year = $('#year').val();
                var minutes = $('#minutes').val();

                $.ajax({
                    url: '/Divers/AddDivingTime',
                    method: 'POST',
                    data: {
                        diverId: diverId,
                        year: year,
                        WorkingMinutes: minutes
                    }
                })
                    .done(function () {
                        updateWorkingTime();
                        var workingHours = parseInt(minutes / 60);
                        var workingMinutes = parseInt(minutes % 60);
                        var hoursWord = getHoursWord(workingHours);
                        var minutesWord = getMinutesWord(workingMinutes);
                        $('#whours-table tr:last').after('<tr><td class="dt-center">' + year + '</td><td class="dt-center">' + workingHours + ' ' + hoursWord + ' ' + workingMinutes + ' ' + minutesWord + '</td><td class="dt-center"><button class="btn btn-danger" id="delete-time-btn" data-year="' + year + '"><i class="fa fa-trash-o fa-lg"></i> Удалить</button></td></tr>');
                        $('#addTimeModal').modal('hide');
                        successAlert("Запись успешно добавлена");
                    })
                    .fail(function (err) {
                        console.error(err);
                        errorAlert("Не удалось добавить запись");
                    })
            })

        function updateWorkingTime() {
            var diverId = model.diverId;
            $.ajax({
                url: '/Divers/GetListWorkingTimeJson',
                method: 'GET',
                data: {
                    diverId: diverId
                }
            })
                .done(function (data) {
                    workingTime = data;
                });
        }

        function getHoursWord(workingHours) {
            var hoursWord = "часов";
            if (workingHours > 10 && workingHours < 20) { }
            else {
                switch (workingHours.toString()[workingHours.toString().length - 1]) {
                    case '2':
                    case '3':
                    case '4':
                        hoursWord = "часа";
                        break;
                    case '1':
                        hoursWord = "час";
                        break;
                }
            }
            return hoursWord;
        }

        function getMinutesWord(workingMinutes) {
            var minutesWord = "минут";
            if (typeof workingMinutes === "undefined" || workingMinutes === null) {
                return;
            }
            if (workingMinutes > 10 && workingMinutes < 20) { }
            else {
                switch (workingMinutes.toString()[workingMinutes.toString().length - 1]) {
                    case '2':
                    case '3':
                    case '4':
                        minutesWord = "минуты";
                        break;
                    case '1':
                        minutesWord = "минута";
                        break;
                }
            }
            return minutesWord;
        }

        $(document).ready(function() {

		$(".main_input_file").change(function() {
			var f_name = [];

			for (var i = 0; i < $(this).get(0).files.length; ++i) {
				f_name.push(" " + $(this).get(0).files[i].name);
			}
			$("#f_name").val(f_name.join(", "));
		});
	});
    </script>
}